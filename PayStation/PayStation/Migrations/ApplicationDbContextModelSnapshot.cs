// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PayStationSW.DataBase;

#nullable disable

namespace PayStationSW.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("PayStationSW.DataBase.AlarmsDB", b =>
                {
                    b.Property<int?>("IdAlarm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_alarm");

                    b.Property<string>("AlarmCode")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("alarm_code");

                    b.Property<DateTime?>("AlarmDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("alarm_date");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("OperatorCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("operator_code");

                    b.Property<string>("Status")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasColumnName("status_code");

                    b.Property<string>("TestColumn")
                        .HasColumnType("TEXT")
                        .HasColumnName("test_colum");

                    b.HasKey("IdAlarm");

                    b.ToTable("AlarmsDB");

                    b.HasData(
                        new
                        {
                            IdAlarm = 1,
                            AlarmCode = "001",
                            AlarmDate = new DateTime(2024, 5, 14, 17, 56, 57, 972, DateTimeKind.Local).AddTicks(1875),
                            Description = "Alarms",
                            OperatorCode = "A",
                            Status = "I"
                        });
                });

            modelBuilder.Entity("PayStationSW.DataBase.CashClosureReceiptDB", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_movement");

                    b.Property<int?>("BanknotesIntroduction")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknotes_introduction");

                    b.Property<int?>("BanknotesIntroduction10")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknotes_introduction_10");

                    b.Property<int?>("BanknotesIntroduction20")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknotes_introduction_20");

                    b.Property<int?>("BanknotesIntroduction5")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknotes_introduction_5");

                    b.Property<int?>("BanknotesIntroduction50")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknotes_introduction_50");

                    b.Property<int?>("BanknotesLoad")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknotes_load");

                    b.Property<int?>("BanknotesLoad10RC")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknotes_load_10_rc");

                    b.Property<int?>("BanknotesLoad10Stacker")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknotes_load_10_stacker");

                    b.Property<int?>("BanknotesLoad20RC")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknotes_load_20_rc");

                    b.Property<int?>("BanknotesLoad20Stacker")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknotes_load_20_stacker");

                    b.Property<int?>("BanknotesLoad50Stacker")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknotes_load_50_stacker");

                    b.Property<int?>("BanknotesLoad5RC")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknotes_load_5_rc");

                    b.Property<int?>("BanknotesLoad5Stacker")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknotes_load_5_stacker");

                    b.Property<int?>("Change")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change");

                    b.Property<int?>("Change10")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_10");

                    b.Property<int?>("Change100")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_100");

                    b.Property<int?>("Change1000")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_1000");

                    b.Property<int?>("Change20")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_20");

                    b.Property<int?>("Change2000")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_2000");

                    b.Property<int?>("Change50")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_50");

                    b.Property<int?>("Change500")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_500");

                    b.Property<int?>("ClosingProgress")
                        .HasColumnType("INTEGER")
                        .HasColumnName("closing_progress");

                    b.Property<int?>("CoinIntroduction")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_introduction");

                    b.Property<int?>("CoinIntroduction10")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_introduction_10");

                    b.Property<int?>("CoinIntroduction100")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_introduction_100");

                    b.Property<int?>("CoinIntroduction20")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_introduction_20");

                    b.Property<int?>("CoinIntroduction200")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_introduction_200");

                    b.Property<int?>("CoinIntroduction50")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_introduction_50");

                    b.Property<int?>("CoinLoad")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_load");

                    b.Property<int?>("CoinLoad10")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_load_10");

                    b.Property<int?>("CoinLoad100")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_load_100");

                    b.Property<int?>("CoinLoad20")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_load_20");

                    b.Property<int?>("CoinLoad200")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_load_200");

                    b.Property<int?>("CoinLoad50")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_load_50");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<int?>("ExcessCoin10")
                        .HasColumnType("INTEGER")
                        .HasColumnName("excess_coin_10");

                    b.Property<int?>("ExcessCoin100")
                        .HasColumnType("INTEGER")
                        .HasColumnName("excess_coin_100");

                    b.Property<int?>("ExcessCoin20")
                        .HasColumnType("INTEGER")
                        .HasColumnName("excess_coin_20");

                    b.Property<int?>("ExcessCoin200")
                        .HasColumnType("INTEGER")
                        .HasColumnName("excess_coin_200");

                    b.Property<int?>("ExcessCoin50")
                        .HasColumnType("INTEGER")
                        .HasColumnName("excess_coin_50");

                    b.Property<DateTime?>("MovementDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("movement_date");

                    b.Property<int?>("NonGivenChange")
                        .HasColumnType("INTEGER")
                        .HasColumnName("non_given_change");

                    b.Property<int?>("NonLoadedBanknotes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("non_loaded_banknotes");

                    b.Property<int?>("NonLoadedBanknotes1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("non_loaded_banknotes1");

                    b.Property<int?>("NonLoadedBanknotesTotal")
                        .HasColumnType("INTEGER")
                        .HasColumnName("non_loaded_banknotes_total");

                    b.Property<string>("Operator")
                        .HasColumnType("TEXT")
                        .HasColumnName("operator");

                    b.Property<string>("Outcome")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("outcome");

                    b.Property<int?>("PosIncome")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pos_income");

                    b.Property<int?>("PresentBanknote10")
                        .HasColumnType("INTEGER")
                        .HasColumnName("present_banknote_10");

                    b.Property<int?>("PresentBanknote20")
                        .HasColumnType("INTEGER")
                        .HasColumnName("present_banknote_20");

                    b.Property<int?>("PresentBanknote5")
                        .HasColumnType("INTEGER")
                        .HasColumnName("present_banknote_5");

                    b.Property<int?>("PresentBanknote50")
                        .HasColumnType("INTEGER")
                        .HasColumnName("present_banknote_50");

                    b.Property<int?>("PresentBanknotesTotal")
                        .HasColumnType("INTEGER")
                        .HasColumnName("present_banknotes_total");

                    b.Property<int?>("PresentCoin10")
                        .HasColumnType("INTEGER")
                        .HasColumnName("present_coin_10");

                    b.Property<int?>("PresentCoin100")
                        .HasColumnType("INTEGER")
                        .HasColumnName("present_coin_100");

                    b.Property<int?>("PresentCoin20")
                        .HasColumnType("INTEGER")
                        .HasColumnName("present_coin_20");

                    b.Property<int?>("PresentCoin200")
                        .HasColumnType("INTEGER")
                        .HasColumnName("present_coin_200");

                    b.Property<int?>("PresentCoin50")
                        .HasColumnType("INTEGER")
                        .HasColumnName("present_coin_50");

                    b.Property<int?>("PresentCoinsTotal")
                        .HasColumnType("INTEGER")
                        .HasColumnName("present_coins_total");

                    b.Property<int?>("TotalPaidCents")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_paid_cents");

                    b.Property<int?>("TotalPaidCentsCash")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_paid_cents_cash");

                    b.HasKey("Id");

                    b.ToTable("CashClosureReceiptsDB");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BanknotesIntroduction = 150,
                            BanknotesIntroduction10 = 30,
                            BanknotesIntroduction20 = 30,
                            BanknotesIntroduction5 = 30,
                            BanknotesIntroduction50 = 30,
                            BanknotesLoad = 200,
                            BanknotesLoad10RC = 50,
                            BanknotesLoad10Stacker = 50,
                            BanknotesLoad20RC = 50,
                            BanknotesLoad20Stacker = 50,
                            BanknotesLoad50Stacker = 50,
                            BanknotesLoad5RC = 50,
                            BanknotesLoad5Stacker = 50,
                            Change = 50,
                            Change10 = 10,
                            Change100 = 10,
                            Change1000 = 0,
                            Change20 = 10,
                            Change2000 = 0,
                            Change50 = 10,
                            Change500 = 0,
                            ClosingProgress = 1,
                            CoinIntroduction = 50,
                            CoinIntroduction10 = 10,
                            CoinIntroduction100 = 10,
                            CoinIntroduction20 = 10,
                            CoinIntroduction200 = 10,
                            CoinIntroduction50 = 10,
                            CoinLoad = 100,
                            CoinLoad10 = 20,
                            CoinLoad100 = 20,
                            CoinLoad20 = 20,
                            CoinLoad200 = 20,
                            CoinLoad50 = 20,
                            Description = "Description1",
                            ExcessCoin10 = 5,
                            ExcessCoin100 = 5,
                            ExcessCoin20 = 5,
                            ExcessCoin200 = 5,
                            ExcessCoin50 = 5,
                            MovementDate = new DateTime(2024, 5, 19, 17, 56, 57, 972, DateTimeKind.Local).AddTicks(2806),
                            NonGivenChange = 100,
                            NonLoadedBanknotes = 30,
                            NonLoadedBanknotes1 = 30,
                            NonLoadedBanknotesTotal = 150,
                            Operator = "Operator1",
                            Outcome = "OUT",
                            PosIncome = 300,
                            PresentBanknote10 = 30,
                            PresentBanknote20 = 30,
                            PresentBanknote5 = 30,
                            PresentBanknote50 = 30,
                            PresentBanknotesTotal = 150,
                            PresentCoin10 = 10,
                            PresentCoin100 = 10,
                            PresentCoin20 = 10,
                            PresentCoin200 = 10,
                            PresentCoin50 = 10,
                            PresentCoinsTotal = 50,
                            TotalPaidCents = 500,
                            TotalPaidCentsCash = 200
                        });
                });

            modelBuilder.Entity("PayStationSW.DataBase.CashDetailDB", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<short?>("DispensedBanknote")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dispensed_banknote");

                    b.Property<short?>("DispensedBanknote1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dispensed_banknote1");

                    b.Property<short?>("Tube10")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tube_10");

                    b.Property<short?>("Tube100")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tube_100");

                    b.Property<short?>("Tube20")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tube_20");

                    b.Property<short?>("Tube200")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tube_200");

                    b.Property<short?>("Tube50")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tube_50");

                    b.HasKey("Id");

                    b.ToTable("CashDetailsDB");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DispensedBanknote = (short)10,
                            DispensedBanknote1 = (short)20,
                            Tube10 = (short)50,
                            Tube100 = (short)50,
                            Tube20 = (short)50,
                            Tube200 = (short)50,
                            Tube50 = (short)50
                        });
                });

            modelBuilder.Entity("PayStationSW.DataBase.DeviceEntityDB", b =>
                {
                    b.Property<string>("DeviceType")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT")
                        .HasColumnName("device_type");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Enabled")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasColumnName("enabled");

                    b.HasKey("DeviceType");

                    b.ToTable("DevicesDB");

                    b.HasData(
                        new
                        {
                            DeviceType = "1",
                            Description = "Gryphon (lettore monete)",
                            Enabled = "0"
                        },
                        new
                        {
                            DeviceType = "2",
                            Description = "Vega Pro (lettore banconote)",
                            Enabled = "0"
                        },
                        new
                        {
                            DeviceType = "3",
                            Description = "isef2000 (lettore POS)",
                            Enabled = "0"
                        },
                        new
                        {
                            DeviceType = "4",
                            Description = "KP300 (stampante ticket)",
                            Enabled = "0"
                        },
                        new
                        {
                            DeviceType = "5",
                            Description = "RC (rendi banconote sigolo taglio)",
                            Enabled = "0"
                        },
                        new
                        {
                            DeviceType = "6",
                            Description = "TWIN (rendi banconote doppio taglio)",
                            Enabled = "0"
                        });
                });

            modelBuilder.Entity("PayStationSW.DataBase.IngenicoPosMovementDB", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_mov");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<int?>("IdMovmentDB")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_movmentDB");

                    b.Property<string>("Overhead")
                        .HasColumnType("TEXT")
                        .HasColumnName("overhead");

                    b.Property<int?>("PaidCents")
                        .HasColumnType("INTEGER")
                        .HasColumnName("paid_cents");

                    b.Property<string>("Success")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasColumnName("success");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("transaction_date");

                    b.HasKey("Id");

                    b.ToTable("IngenicoPosMovementsDB");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Payment successful",
                            IdMovmentDB = 0,
                            Overhead = "Some overhead data",
                            PaidCents = 1000,
                            Success = "Y",
                            TransactionDate = new DateTime(2024, 5, 19, 17, 56, 57, 972, DateTimeKind.Local).AddTicks(4426)
                        });
                });

            modelBuilder.Entity("PayStationSW.DataBase.MovementDB", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_movement");

                    b.Property<int?>("Amount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("amount");

                    b.Property<int?>("Banknotes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknotes");

                    b.Property<int?>("Change")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change");

                    b.Property<int?>("ChangeBanknotes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_banknotes");

                    b.Property<int?>("ChangeBanknotes1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_banknotes1");

                    b.Property<int?>("ClosingProgress")
                        .HasColumnType("INTEGER")
                        .HasColumnName("closing_progress");

                    b.Property<int?>("Coins")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coins");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("MovementDateClose")
                        .HasColumnType("TEXT")
                        .HasColumnName("movement_date_close");

                    b.Property<DateTime?>("MovementDateOpen")
                        .HasColumnType("TEXT")
                        .HasColumnName("movement_date_open");

                    b.Property<string>("OperatorCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("operator_code");

                    b.Property<string>("Outcome")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("outcome");

                    b.Property<int?>("PaidCents")
                        .HasColumnType("INTEGER")
                        .HasColumnName("paid_cents");

                    b.HasKey("Id");

                    b.ToTable("MovementsDB");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Banknotes = 5,
                            Change = 0,
                            ChangeBanknotes = 0,
                            ChangeBanknotes1 = 0,
                            ClosingProgress = 0,
                            Coins = 10,
                            Description = "Initial deposit",
                            MovementDateOpen = new DateTime(2024, 5, 14, 17, 56, 57, 972, DateTimeKind.Local).AddTicks(4898),
                            OperatorCode = "A",
                            Outcome = "IN",
                            PaidCents = 1000
                        });
                });

            modelBuilder.Entity("PayStationSW.DataBase.ParameterDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BanknoteValueInCassetteBox1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BanknoteValueInCassetteBox1");

                    b.Property<int?>("BanknoteValueInCassetteBox2")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BanknoteValueInCassetteBox2");

                    b.Property<int?>("CashId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Cash_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<int?>("MaxBanknoteGiveBackBox1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MaxBanknoteGiveBackBox1");

                    b.Property<int?>("MaxBanknoteGiveBackBox2")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MaxBanknoteGiveBackBox2");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("Row1")
                        .HasColumnType("TEXT")
                        .HasColumnName("Row1");

                    b.Property<string>("Row2")
                        .HasColumnType("TEXT")
                        .HasColumnName("Row2");

                    b.Property<string>("Row3")
                        .HasColumnType("TEXT")
                        .HasColumnName("Row3");

                    b.Property<string>("Row4")
                        .HasColumnType("TEXT")
                        .HasColumnName("Row4");

                    b.Property<string>("Row5")
                        .HasColumnType("TEXT")
                        .HasColumnName("Row5");

                    b.Property<string>("Row6")
                        .HasColumnType("TEXT")
                        .HasColumnName("Row6");

                    b.Property<string>("Row7")
                        .HasColumnType("TEXT")
                        .HasColumnName("Row7");

                    b.Property<string>("TerminalId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Terminal_ID");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("ParametersDB");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BanknoteValueInCassetteBox1 = 10,
                            BanknoteValueInCassetteBox2 = 20,
                            CashId = 1,
                            Description = "Description1",
                            MaxBanknoteGiveBackBox1 = 5,
                            MaxBanknoteGiveBackBox2 = 10,
                            Name = "Parameter1",
                            Row1 = "Row1",
                            Row2 = "Row2",
                            Row3 = "Row3",
                            Row4 = "Row4",
                            Row5 = "Row5",
                            Row6 = "Row6",
                            Row7 = "Row7",
                            TerminalId = "Terminal1",
                            Value = "Value1"
                        });
                });

            modelBuilder.Entity("PayStationSW.DataBase.PartialCashClosureDB", b =>
                {
                    b.Property<int?>("ClosingProgress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("closing_progress");

                    b.Property<int?>("BanknoteIntroduction")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknote_introduction");

                    b.Property<int?>("BanknoteIntroduction10")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknote_introduction_10");

                    b.Property<int?>("BanknoteIntroduction20")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknote_introduction_20");

                    b.Property<int?>("BanknoteIntroduction5")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknote_introduction_5");

                    b.Property<int?>("BanknoteIntroduction50")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknote_introduction_50");

                    b.Property<int?>("BanknoteLoad")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknote_load");

                    b.Property<int?>("BanknoteLoad10RC")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknote_load_10_rc");

                    b.Property<int?>("BanknoteLoad10Stacker")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknote_load_10_stacker");

                    b.Property<int?>("BanknoteLoad20RC")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknote_load_20_rc");

                    b.Property<int?>("BanknoteLoad20Stacker")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknote_load_20_stacker");

                    b.Property<int?>("BanknoteLoad50Stacker")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknote_load_50_stacker");

                    b.Property<int?>("BanknoteLoad5RC")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknote_load_5_rc");

                    b.Property<int?>("BanknoteLoad5Stacker")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banknote_load_5_stacker");

                    b.Property<int?>("Change")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change");

                    b.Property<int?>("Change10")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_10");

                    b.Property<int?>("Change100")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_100");

                    b.Property<int?>("Change1000")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_1000");

                    b.Property<int?>("Change20")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_20");

                    b.Property<int?>("Change2000")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_2000");

                    b.Property<int?>("Change50")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_50");

                    b.Property<int?>("Change500")
                        .HasColumnType("INTEGER")
                        .HasColumnName("change_500");

                    b.Property<int?>("CoinIntroduction")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_introduction");

                    b.Property<int?>("CoinIntroduction10")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_introduction_10");

                    b.Property<int?>("CoinIntroduction100")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_introduction_100");

                    b.Property<int?>("CoinIntroduction20")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_introduction_20");

                    b.Property<int?>("CoinIntroduction200")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_introduction_200");

                    b.Property<int?>("CoinIntroduction50")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_introduction_50");

                    b.Property<int?>("CoinLoad")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_load");

                    b.Property<int?>("CoinLoad10")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_load_10");

                    b.Property<int?>("CoinLoad100")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_load_100");

                    b.Property<int?>("CoinLoad20")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_load_20");

                    b.Property<int?>("CoinLoad200")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_load_200");

                    b.Property<int?>("CoinLoad50")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coin_load_50");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_update");

                    b.Property<int?>("ExcessCoin10")
                        .HasColumnType("INTEGER")
                        .HasColumnName("excess_coin_10");

                    b.Property<int?>("ExcessCoin100")
                        .HasColumnType("INTEGER")
                        .HasColumnName("excess_coin_100");

                    b.Property<int?>("ExcessCoin20")
                        .HasColumnType("INTEGER")
                        .HasColumnName("excess_coin_20");

                    b.Property<int?>("ExcessCoin200")
                        .HasColumnType("INTEGER")
                        .HasColumnName("excess_coin_200");

                    b.Property<int?>("ExcessCoin50")
                        .HasColumnType("INTEGER")
                        .HasColumnName("excess_coin_50");

                    b.Property<int?>("NonGivenChange")
                        .HasColumnType("INTEGER")
                        .HasColumnName("non_given_change");

                    b.Property<int?>("PosIncome")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pos_income");

                    b.Property<int?>("TotalPaidCents")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_paid_cents");

                    b.Property<int?>("TotalPaidCentsCash")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_paid_cents_cash");

                    b.HasKey("ClosingProgress");

                    b.ToTable("PartialCashClosuresDB");

                    b.HasData(
                        new
                        {
                            ClosingProgress = 1,
                            BanknoteIntroduction = 150,
                            BanknoteIntroduction10 = 30,
                            BanknoteIntroduction20 = 30,
                            BanknoteIntroduction5 = 30,
                            BanknoteIntroduction50 = 30,
                            BanknoteLoad = 200,
                            BanknoteLoad10RC = 50,
                            BanknoteLoad10Stacker = 50,
                            BanknoteLoad20RC = 50,
                            BanknoteLoad20Stacker = 50,
                            BanknoteLoad50Stacker = 50,
                            BanknoteLoad5RC = 50,
                            BanknoteLoad5Stacker = 50,
                            Change = 50,
                            Change10 = 10,
                            Change100 = 10,
                            Change1000 = 0,
                            Change20 = 10,
                            Change2000 = 0,
                            Change50 = 10,
                            Change500 = 0,
                            CoinIntroduction = 50,
                            CoinIntroduction10 = 10,
                            CoinIntroduction100 = 10,
                            CoinIntroduction20 = 10,
                            CoinIntroduction200 = 10,
                            CoinIntroduction50 = 10,
                            CoinLoad = 100,
                            CoinLoad10 = 20,
                            CoinLoad100 = 20,
                            CoinLoad20 = 20,
                            CoinLoad200 = 20,
                            CoinLoad50 = 20,
                            DateUpdate = new DateTime(2024, 5, 19, 17, 56, 57, 972, DateTimeKind.Local).AddTicks(5735),
                            ExcessCoin10 = 5,
                            ExcessCoin100 = 5,
                            ExcessCoin20 = 5,
                            ExcessCoin200 = 5,
                            ExcessCoin50 = 5,
                            NonGivenChange = 100,
                            PosIncome = 300,
                            TotalPaidCents = 500,
                            TotalPaidCentsCash = 200
                        });
                });

            modelBuilder.Entity("PayStationSW.DataBase.SerialConnectionParameterDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaudRate")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BaudRate");

                    b.Property<int>("DataBits")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DataBits");

                    b.Property<int?>("Device")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Device");

                    b.Property<int>("Handshake")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Handshake");

                    b.Property<string>("LastPortName")
                        .HasColumnType("TEXT")
                        .HasColumnName("LastPortName");

                    b.Property<int>("Parity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Parity");

                    b.Property<int>("StopBits")
                        .HasColumnType("INTEGER")
                        .HasColumnName("StopBits");

                    b.HasKey("Id");

                    b.ToTable("SerialConnectionParametersDB");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaudRate = 9600,
                            DataBits = 8,
                            Device = 0,
                            Handshake = 0,
                            LastPortName = "COM2",
                            Parity = 2,
                            StopBits = 1
                        },
                        new
                        {
                            Id = 2,
                            BaudRate = 9600,
                            DataBits = 8,
                            Device = 3,
                            Handshake = 0,
                            LastPortName = "COM8",
                            Parity = 2,
                            StopBits = 1
                        },
                        new
                        {
                            Id = 3,
                            BaudRate = 9600,
                            DataBits = 8,
                            Device = 1,
                            Handshake = 0,
                            LastPortName = "COM7",
                            Parity = 0,
                            StopBits = 1
                        },
                        new
                        {
                            Id = 4,
                            BaudRate = 115200,
                            DataBits = 8,
                            Device = 2,
                            Handshake = 0,
                            LastPortName = "COM8",
                            Parity = 0,
                            StopBits = 1
                        });
                });

            modelBuilder.Entity("PayStationSW.DataBase.SerialConnectionSettingDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Device")
                        .HasColumnType("TEXT")
                        .HasColumnName("Device");

                    b.Property<bool>("IsTimedMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsTimedMode");

                    b.Property<int>("MaxRetryAttempts")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MaxRetryAttempts");

                    b.Property<int>("RetryDelayMilliseconds")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RetryDelayMilliseconds");

                    b.HasKey("Id");

                    b.ToTable("SerialConnectionSettingDB");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Device = "CASH",
                            IsTimedMode = true,
                            MaxRetryAttempts = 3,
                            RetryDelayMilliseconds = 300
                        },
                        new
                        {
                            Id = 2,
                            Device = "PRINTER",
                            IsTimedMode = true,
                            MaxRetryAttempts = 3,
                            RetryDelayMilliseconds = 300
                        },
                        new
                        {
                            Id = 3,
                            Device = "COIN",
                            IsTimedMode = true,
                            MaxRetryAttempts = 3,
                            RetryDelayMilliseconds = 300
                        },
                        new
                        {
                            Id = 4,
                            Device = "POS",
                            IsTimedMode = true,
                            MaxRetryAttempts = 3,
                            RetryDelayMilliseconds = 300
                        });
                });

            modelBuilder.Entity("PayStationSW.DataBase.TextPrinterObjectsDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Alligment")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Alligment");

                    b.Property<bool>("Bold")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Bold");

                    b.Property<int>("DistanceAfterObj")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DistanceAfterObj");

                    b.Property<int>("DistanceBeforeObj")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DistanceBeforeObj");

                    b.Property<bool>("Highlighting")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Highlighting");

                    b.Property<int>("LeftMargin")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LeftMargin");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<bool>("Overlapping")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Overlapping");

                    b.Property<bool>("Revolving")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Revolving");

                    b.Property<int>("SizeHeight")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SizeHeight");

                    b.Property<int>("SizeWidth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SizeWidth");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT")
                        .HasColumnName("Text");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Type");

                    b.Property<int>("TypeFont")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeFont");

                    b.Property<bool>("Underline")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Underline");

                    b.Property<bool>("UpsideDown")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UpsideDown");

                    b.HasKey("Id");

                    b.ToTable("TextPrinterObjectsDB");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alligment = 0,
                            Bold = false,
                            DistanceAfterObj = 0,
                            DistanceBeforeObj = 0,
                            Highlighting = false,
                            LeftMargin = 0,
                            Name = "Company",
                            Overlapping = false,
                            Revolving = false,
                            SizeHeight = 1,
                            SizeWidth = 1,
                            Text = "Company",
                            Type = 1,
                            TypeFont = 0,
                            Underline = false,
                            UpsideDown = false
                        });
                });

            modelBuilder.Entity("PayStationSW.DataBase.TicketLayoutDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("Objects")
                        .HasColumnType("TEXT")
                        .HasColumnName("Objects");

                    b.HasKey("Id");

                    b.ToTable("TicketLayoutDB");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ticket cassa",
                            Objects = "[1,2]"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
